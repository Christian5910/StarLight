# ARQUIVO: tts_super_robusto.py
import pyttsx3
import time
import threading

class TTS_Super_Robusto:
    def __init__(self):
        print("üöÄ Iniciando TTS Super-Robusto...")
        self.voice_id = self._encontrar_voz_pt()
        print("üéØ TTS Super-Robusto - PRONTO!")
    
    def _encontrar_voz_pt(self):
        """Encontra a melhor voz em portugu√™s"""
        try:
            engine = pyttsx3.init()
            voices = engine.getProperty('voices')
            
            for voice in voices:
                if any(term in voice.name.lower() for term in ['portugu√™s', 'brazil', 'portuguese', 'pt-br']):
                    print(f"‚úÖ Voz encontrada: {voice.name}")
                    engine.stop()
                    return voice.id
            
            # Fallback para primeira voz dispon√≠vel
            if voices:
                print(f"‚ö†Ô∏è  Voz padr√£o: {voices[0].name}")
                engine.stop()
                return voices[0].id
                
            return None
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar vozes: {e}")
            return None
    
    def falar(self, texto):
        """Fala o texto de forma ROBUSTA"""
        if not texto or not texto.strip():
            return
            
        print(f"üé§ FALANDO: {texto}")
        
        try:
            # ‚úÖ CORRE√á√ÉO: NOVA engine para CADA fala
            engine = pyttsx3.init()
            
            # Configura√ß√µes
            engine.setProperty('rate', 170)  # Velocidade ideal
            engine.setProperty('volume', 1.0)
            
            if self.voice_id:
                engine.setProperty('voice', self.voice_id)
            
            # Fala o texto
            engine.say(texto)
            engine.runAndWait()
            
            # Limpeza adequada
            engine.stop()
            
            print("‚úÖ Fala OK!")
            
        except RuntimeError as e:
            if "run loop already started" in str(e):
                # ‚úÖ CORRE√á√ÉO para o bug espec√≠fico
                print("‚ö†Ô∏è  Bug do run loop corrigido automaticamente")
                self._falar_alternativo(texto)
            else:
                print(f"‚ùå Erro Runtime: {e}")
        except Exception as e:
            print(f"‚ùå Erro geral: {e}")
            print(f"üîä [FALLBACK]: {texto}")
    
    def _falar_alternativo(self, texto):
        """M√©todo alternativo para quando o principal falha"""
        try:
            import pyttsx3
            engine = pyttsx3.init()
            engine.setProperty('rate', 170)
            engine.say(texto)
            engine.runAndWait()
            engine.stop()
        except:
            print(f"üîä [FALLBACK FINAL]: {texto}")

# TESTE MEGA COMPLETO
if __name__ == "__main__":
    print("=" * 60)
    print("üéØ TESTE SUPER-ROBUSTO - 10 FALAS SEGUIDAS")
    print("=" * 60)
    
    tts = TTS_Super_Robusto()
    
    # Teste EXTENSIVO
    testes = [
        "Frase n√∫mero um do teste robusto.",
        "Segunda frase confirmando funcionamento.",
        "Terceira frase sem problemas!",
        "Quarta frase continua perfeita.",
        "Quinta frase ainda funcionando!",
        "Sexta frase sem travamentos.",
        "S√©tima frase fluindo bem.",
        "Oitava frase quase terminando.",
        "Pen√∫ltima frase do teste!",
        "√öLTIMA frase - teste COMPLETO com sucesso!"
    ]
    
    for i, texto in enumerate(testes, 1):
        print(f"\nüîä Teste {i}/10")
        tts.falar(texto)
        time.sleep(0.3)  # Pausa m√≠nima
    
    print("\n" + "=" * 60)
    print("üéâüéâüéâ TODAS AS 10 FRASES FUNCIONARAM PERFEITAMENTE!")
    print("=" * 60)
    input("Pressione Enter para sair...")